// SPDX-FileCopyrightText: Deutsches Elektronen-Synchrotron DESY, MSK, ChimeraTK Project <chimeratk-support@desy.de>
// SPDX-License-Identifier: LGPL-3.0-or-later
#pragma once

#include "ApplicationModule.h"
#include "ConfigReader.h"
#include "ScalarAccessor.h"

// The VersionInfo header is auto-generated by the project template in the target project.
// References to the respective `namespace ChimeraTK::VersionInfo` must be header-only
// to avoid inclusion in the ApplicationCore.so file.
#include "VersionInfo.h"

#include <boost/format.hpp>

namespace ChimeraTK {
  /**
   * This module can be added to applications to provide version information from the `CMakeLists.txt` file in a
   * standardized manner.
   * The server is also expected to have a module named "Application" with a variable named "configPatchVersion" of
   * type "int32" in its xml configuration file (cf. ChimeraTK::ConfigReader).
   */
  class VersionInfoProvider : public ApplicationModule {
   public:
    explicit VersionInfoProvider(Application* owner);

    ~VersionInfoProvider() override { dynamic_cast<Application*>(getOwner())->setVersionInfoProvider(nullptr); };

   private:
    int configPatch{appConfig().get<int>("Application/configPatchVersion")};

    ScalarOutput<int> majorVersion{this, "majorVersion", "", "Major version of the application"};
    ScalarOutput<int> minorVersion{this, "minorVersion", "", "Minor version of the application"};
    ScalarOutput<int> patchVersion{this, "patchVersion", "", "Patch version of the application"};
    ScalarOutput<std::string> fullVersion{
        this, "fullVersion", "", "Full version of the application with configuration patch"};

    void mainLoop() override {}

    void prepare() override;

    VersionInfoProvider(const VersionInfoProvider&) = delete;
    void operator=(const VersionInfoProvider&) = delete;
    VersionInfoProvider(VersionInfoProvider&&) = delete;
    void operator=(VersionInfoProvider&&) = delete;
  };

  /********************************************************************************************************************/

  inline void VersionInfoProvider::prepare() {
    majorVersion = VersionInfo::major;
    minorVersion = VersionInfo::minor;
    patchVersion = VersionInfo::applicationPatch;
    boost::format fmt = boost::format("%02d.%02d.%02d-%02d") % static_cast<int>(majorVersion) %
        static_cast<int>(minorVersion) % static_cast<int>(patchVersion) % configPatch;
    fullVersion = fmt.str();
    writeAll();
  }

  inline VersionInfoProvider::VersionInfoProvider(Application* owner)
  : ApplicationModule(owner, "Application", "Module to publish version information") {
    if(owner->getVersionInfoProvider()) {
      throw logic_error("An application can only have one VersionInfoprovider.");
    }
    owner->setVersionInfoProvider(this);
  }

} // namespace ChimeraTK